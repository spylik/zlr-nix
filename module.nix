{config, pkgs, ...}:

let 
    # we going to build zlr package from package.nix
    zlr = pkgs.callPackage ./package.nix {};
in

{
    # open port
    networking.firewall.allowedTCPPorts = [80];

    # Create separate group for zalora web service
    users.extraGroups.zlr = {};

    # Create separate user account for zalora web service
    users.extraUsers.zlr = {
        description = "Zalora web service user";
        home = "/var/log/zlr";
        extraGroups = [
            "zlr"
        ];
        createHome = true;
    };

    # creating system.d service for zalora web service
    systemd.services.zaloraWWW = {
        path = [
            pkgs.gawk               # startup script generated by relx requered awk
            pkgs.gnused             # startup script generated by relx required sed
            pkgs.gzip               # startup script generated by relx required gzip (to archive/unarchive versions for hot-code reload)
            pkgs.utillinux          # startup script generated by relx required logger what in utillinux package
        ];

        description = "Zalora web service.";
        
        # we put service to multi-user.target it is kind of 3rd runlevel (multi-user, non-graphical)
        wantedBy = [ "multi-user.target" ];

        # Our package binding port 80, but ports below 1024 are restricted to listen from non-root user.
        # todo: need to investigate how to enable cap_net_bind_service or just run it from root (current solution)
        serviceConfig = {
            Capabilities = "cap_net_bind_service+=ep";
#            User = "zlr";                           # running by zlr user
            User = "root";                          # running from root user
            Group = "zlr";                          # running by group
            ExecStart = ''${zlr}/bin/zlr start'';   # start script
            Type = "forking";                       # our startap script generated by relx requre forking strategy
        };

        # we will run this service after systemd network.target
        after = [ "network.target" ];

        # enabling service
        enable = true;
    };
}
